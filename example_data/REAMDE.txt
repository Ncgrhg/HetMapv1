HetMap Version 1.0 for linux only

The HetMap implements methods from the following paper:

An Pipeline for SNP calling from next generation sequence and minssing genotype imputation 
from the called SNP dataset.

author Gonghao <hgong@ncgr.ac.cn>
National Center for Gene Research, Institute of Plat Physiology and Ecology, Shanghai insitutes
for Biological Sciences, Chinese Academy of Sciences.

in this directory we give some example files for testing. We  list the example workflow
and explained details about the file formats in the workflow. For detailed explaination
of the program and general picture of the workflow you can consult "../README.txt" for details.

In the directory you can Paire-end  short reads file for three accessions. They are:
example1_1.fastq example1_2.fastq
example2_1.fastq example2_2.fastq
example3_1.fastq example3_2.fastq

for the Run of the following example work follow. You should have bwa,samtools and beagle
software packages installed.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
you should unzip the compressed file of the rice genome first.
tar -zvxf ric_simple.fa.tar.gz
One example command to align the reads to genome is as follows:
./bwa mem -M -t 4 rice_simple.fa example1_1.fastq example1_2.fastq | samtools view -bS - | samtools sort - ./example1.sorted
./bwa mem -M -t 4 rice_simple.fa example2_1.fastq example2_2.fastq | samtools view -bS - | samtools sort - ./example2.sorted
./bwa mem -M -t 4 rice_simple.fa example3_1.fastq example3_2.fastq | samtools view -bS - | samtools sort - ./example3.sorted

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Then you can use "Cal_snp" program to Call snp from the file, one example command is as follows:
../Cal_snp example1.sorted.bam ric_simple.fa example1.pile.output
../Cal_snp example1.sorted.bam ric_simple.fa example2.pile.output
../Cal_snp example1.sorted.bam ric_simple.fa example3.pile.output

As we use samtools api in this program you index genome first.
the example command is "samtools index ric_simple.fa".

the example output for the this program is shown below:

chr4	19416980	T	G	)
chr6	17494357	G	A	A
chr6	10380851	G	T	8
chr6	10380850	C	T	9
chr3	34316801	A	C	D
chr6	10380806	T	G	D
chr4	34893854	G	A	#
chr4	34893881	G	T	#
chr4	34893889	G	T	#
chr4	34893891	A	C	#

The First column is contig name. We have 12 contigs for the reference genome.
the second column is the postion of the snp in the contig.
the third column is the reference base pair for this position.
the fourth column is the mapped reads which is different from refrence genome, It have at least one character.
the fifth column  is the score for the reads encoded in illumina phred score format.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Sum_snp" can be used to summarize output generated by the above program:
ls *.pile.output > example.pile.output.filelist
../Sum_snp ric_simple.fa example.pile.output.filelist example.primary.snp.site 1

As we only have three low-coverage sequence data in this situation so we keep the SNP that have 1 fold coverage. In fact one number bigger
than 1 is suitable for the real analysis.

the example output for the program is as follows:

chr1	57412	C	0	0	1	0
chr1	57428	G	1	0	0	0
chr1	57951	C	0	1	0	0
chr1	62383	C	0	1	0	0
chr1	89446	C	0	1	0	0
chr1	166312	G	0	0	0	1
chr1	166320	C	0	1	0	0
chr1	166326	T	0	0	0	1
chr1	173394	C	0	1	0	0
chr1	173411	T	0	0	0	1

the First column is contig name.
the second column is the postion of the snp in the contig.
the third column is the reference base pair for this position.
the fourth column is the count of A snp for this polymorphic site.
the fifth column is the count of T snp for this polymorphic site.
the sixth column is the count of G snp for this polymorphic site.
the seventh column is the count oC T snp for this polymorphic site.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Choose_pile" can used to pile all the base on chosen primary polymorphic site.

../Choose_pile example1.sorted.bam ric_simple.fa example.primary.snp.site example1.mpile.output
../Choose_pile example2.sorted.bam ric_simple.fa example.primary.snp.site example2.mpile.output
../Choose_pile example3.sorted.bam ric_simple.fa example.primary.snp.site example3.mpile.output

the Choose_pile output format is similar to that generated by the Call_snp.
the column information is the same to Call_snp program and we don't exaplain again here. The Choose_pile 
output all the base pair that is aligned to the chosen polymorphic site. we denote "*" as missing
for the base pair and their related quality score.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Filter_snp" can be used to filter the called set generated by "Sum_snp" and generate the final snp dataset.
You can specify minor allele frequency and missing rate for the filtering.
ls *.mpile.out > example.mpile.output.filelist
../Filter_snp example.mpile.output.filelist 0.05 0.5 example.final.snp.filtet.site

As we have only three accession in the example data, we set missing rate as 0.05 and maf as 0.5

the exmaple output is shown below:

chr1	4824928	A	G	1	1	0.5	0.333333
chr1	12298451	C	A	1	1	0.5	0.333333
chr1	14178560	C	G	1	1	0.5	0.333333
chr1	19894743	G	A	1	1	0.5	0.333333
chr1	19894759	T	C	1	1	0.5	0.333333
chr1	21987874	T	C	1	1	0.5	0.333333
chr1	29837246	G	A	1	1	0.5	0.333333
chr1	31953562	A	T	1	1	0.5	0.333333
chr1	32037612	G	A	1	1	0.5	0.333333
chr1	33558695	T	C	1	1	0.5	0.333333


The first four column are contig name, snp position, reference base, alternative base.
the fifth column is the count of reference allele in the population.
the sixth column is the count of alternative allele in the population.
the seventh column is the minor allele frequency in the population. We set it as zero if there is one alelle.
the last column is the missing rate for this site in the population.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Cal_prob" can be used to calculate the likelihood for each accession and generate VCF 4.0 output format.

../Cal_prob example.mpile.output.filelist example.final.snp.filtet.site example.likelihood.output.vcf

For details about the VCF 4.0 format you can consult 
"http://www.1000genomes.org/wiki/Analysis/Variant%20Call%20Format/vcf-variant-call-format-version-40" for details.
If missing genotype didn't affect your analysis you can use the SNP called in this program for your analysis.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For imputation of the missing genotype command you can consult the beagle manual page.
following link "https://faculty.washington.edu/browning/beagle/beagle.html#download".

you can use "java -jar beagle.jar gl=example.likelihood.output.vcf gt=xample.likelihood.output.vcf.imp" here.
Then you can use imputed genotype for the downstream analysis. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
License
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
